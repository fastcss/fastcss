@use "sass:list";
@use "sass:math";
@use "sass:string";
@use "sass:map";
@use "sass:meta";
@use 'sass:color';
@use 'config' as *;

// The default config is used if the $config map is not overwritten
$config: $defaultConfig !default;

// Use this function to access the config
//
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
@function config($keys...) {
  $value: $config;
  @each $key in $keys {
    @if null == map.get($value, $key) {
      @return null;
    } @else {
      $value: map.get($value, $key);
    }
  }
  @return $value;
}

// Returns a config value, the namespace should be using dots
// ex: typography.font-families.base
//
// @return {null|list}
@function conf($namespace, $default: null) {
  $elements: explode($namespace, '.');
  @if ($elements) {
    @return config($elements...);
  }
  @return $default;
}

// Returns a color from the palette based on the specified variant
// The default (base) variant is 500
//
// @param  {string} $colorName
// @param  {string} $variantName
// @return {string} Hex color
@function get-color($colorName, $variantName: '500') {
  $colorNameNoVariants: list.nth(string.split($colorName, ":"), 1);

  $colorHex: null;
  @each $name, $hex in config('colors', 'palette') {
    @if (string.index($name, $colorNameNoVariants)) {
      $colorHex: $hex;
    }
  }

  $variantPercent: config('colors', 'variants', $variantName);

  @if not $colorHex {
    @error "Unknown color `#{$colorName}` in the configuration.";
  }

  @if not $variantPercent {
    @error "Unknown variant `#{$variantName}` in the configuration.";
  }

  @if($variantPercent == 0) {
    @return $colorHex;
  }

  @if($variantPercent > 0) {
    @return color.mix(white, $colorHex, (math.percentage(math.div($variantPercent, 100))));
  }

  @return color.mix(black, $colorHex, (math.percentage(math.div($variantPercent, -100))));
}

// Get the previous element from a map by using the key of the current element
//
// @param  {integer} $key
// @param  {map} $map
// @return {integer} The key of the previous element
@function map-get-prev($key, $map) {
  $keys: map.keys($map);
  $index: list.index($keys, $key) - 1;

  @if($index == 0) {
    @return $key;
  }

  @return list.nth($keys, $index);
}

// Convert pixels to ems
//
// @param  {px} $pixels
// @param  {number} $base:  16
// @return {em}
@function pxtoem($pixels, $base: 16) {
  @if (math.is-unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (math.is-unitless($base)) {
    $base: $base * 1px;
  }

  @return math.div($pixels, $base) * 1em;
}

/// Remove the unit of a length
///
/// @param  {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

// Prepend to list
//
// @param {List} $list
// @param {Mixed} $value
// @return {List}
@function prepend($list, $value) {
  @return list.join(($value,), $list);
}

// Get the first key from the list
//
// @return {integer}
@function first($list) {
  @return list.nth($list, 1);
}

// Get the last key from the list
//
// @return {integer}
@function last($list) {
  @return list.nth($list, list.length($list));
}

// @return {boolean}
@function is-number($value) {
  @return meta.type-of($value) == 'number';
}

// @return {boolean}
@function is-time($value) {
  @return is-number($value) and list.index(('ms', 's'), math.unit($value)) != null;
}

// @return {boolean}
@function is-duration($value) {
  @return is-time($value);
}

// @return {boolean}
@function is-angle($value) {
  @return is-number($value) and list.index(('deg', 'rad', 'grad', 'turn'), math.unit($value)) != null;
}

// @return {boolean}
@function is-frequency($value) {
  @return is-number($value) and list.index(('Hz', 'kHz'), math.unit($value)) != null;
}

// @return {boolean}
@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

// @return {boolean}
@function is-relative-length($value) {
  @return is-number($value) and list.index(('em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax'), math.unit($value)) != null;
}

// @return {boolean}
@function is-absolute-length($value) {
  @return is-number($value) and list.index(('cm', 'mm', 'in', 'px', 'pt', 'pc'), math.unit($value)) != null;
}

// @return {boolean}
@function is-percentage($value) {
  @return is-number($value) and math.unit($value) == '%';
}

// @return {boolean}
@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

// @return {boolean}
@function is-resolution($value) {
  @return is-number($value) and list.index(('dpi', 'dpcm', 'dppx'), math.unit($value)) != null;
}

// @return {boolean}
@function is-position($value) {
  @return is-length($value) or is-percentage($value) or list.index(('top', 'right', 'bottom', 'left', 'center'), $value) != null;
}

// @return {boolean}
@function is-map($value){
  @return meta.type-of($value) == 'map';
}

// Split a string into a list of strings
//
// @param  {string} $string The string to be split
// @param  {string} $delimiter The boundary string
// @return {list} the result list
@function explode($string, $delimiter) {
  $result: ();
  @if $delimiter == "" {
    @for $i from 1 through string.length($string) {
      $result: list.append($result, string.slice($string, $i, $i));
    }
    @return $result;
  }
  $exploding: true;
  @while $exploding {
    $d-index: string.index($string, $delimiter);
    @if $d-index {
      @if $d-index > 1 {
        $result: list.append($result, string.slice($string, 1, $d-index - 1));
        $string: string.slice($string, $d-index + string.length($delimiter));
      } @else if $d-index == 1 {
        $string: string.slice($string, 1, $d-index + string.length($delimiter));
      } @else {
        $result: list.append($result, $string);
        $exploding: false;
      }
    } @else {
      $result: list.append($result, $string);
      $exploding: false;
    }
  }
  @return $result;
}

// Join list elements to form a single string
//
// @param  {string} $pieces The list of strings to implode
// @param  {string} $glue The "glue" between elements in the result string
// @return {string} The result string
@function implode($pieces, $glue: "") {
  $result: null;
  @for $i from 1 through list.length($pieces) {
    $piece: list.nth($pieces, $i);
    @if meta.type-of($piece) == list {
      $result: string.unquote("#{$result}#{$glue}#{implode($piece, $glue)}");
    } @else {
      $result: string.unquote("#{$result}#{$glue}#{$piece}");
    }
  }
  @if $result != null {
    $result: string.slice($result, string.length($glue) + 1, -1);
  }
  @return $result;
}

// @param  {List} $haystack
// @param  {Mixed} $needle
// @return {boolean}
@function contains($haystack, $needle) {
  @return not not list.index($haystack, $needle);
}
