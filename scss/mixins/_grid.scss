@use 'sass:math';
@use 'sass:list';
@use '../functions' as *;
@use '../mixins/utilities';

@mixin make-grid($gutter, $columns) {
  $_gutterHalf: math.div($gutter, 2);

  @include container($_gutterHalf);
  @include row($_gutterHalf);
  @include columns($_gutterHalf);

  @include all-screen-min() using ($screenName, $screenWidth, $screenIndex) {
    @include column-classes($screenName, $screenWidth, $columns, $gutter);
  }
}

@mixin make-grid-utilities($screen, $columns) {
  @include column-utilities($screen, $columns);
  @include row-utilities($screen);
}

@mixin row($gutterHalf) {
  .row {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-left: -($gutterHalf);
    margin-right: -($gutterHalf);
    @include utilities.clearfix;

    &.row-reverse {
      flex-direction: row-reverse;
    }
  }
}

@mixin container($gutterHalf) {
  .container,
  .container-fluid {
    margin-left: auto;
    margin-right: auto;
    padding-left: $gutterHalf;
    padding-right: $gutterHalf;
  }
}

@mixin columns($gutterHalf) {
  // applies for all classes starting with col or containing :col-
  [class^="col"],
  [class*="\:col-"] {
    position: relative;
    box-sizing: border-box;
    flex: 0 0 auto;
    padding-left: $gutterHalf;
    padding-right: $gutterHalf;

    &.col-reverse {
      flex-direction: column-reverse;
    }
  }
}

@mixin column-classes($screen, $width, $columns, $gutter) {
  @include _container($width, $gutter);
  @include column($screen, $columns);
}

@mixin column($screen, $columns) {
  $screenText: if($screen, $screen+'\\:', '');

  .#{$screenText}col {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }
  @for $column from 1 through $columns {
    .#{$screenText}col-#{$column} {
      flex-basis: math.percentage(math.div($column, $columns));
      max-width: math.percentage(math.div($column, $columns));
    }
  }
}

@mixin _container($width, $gutter) {
  .container {
    width: $width - $gutter;
  }
}

@mixin column-utilities($screen, $columns) {
  $screenText: if($screen, $screen+'\\:', '');

  @for $column from 1 through $columns {
    .#{$screenText}col-#{$column}-offset {
      margin-left: math.percentage(math.div($column, $columns));
    }
    .#{$screenText}col-#{$column}-push {
      left: math.percentage(math.div($column, $columns));
    }
    .#{$screenText}col-#{$column}-pull {
      right: math.percentage(math.div($column, $columns));
    }
  }
}

@mixin row-utilities($screen) {
  $screenText: if($screen, $screen+'\\:', '');

  .#{$screenText}items-start { justify-content: flex-start; }
  .#{$screenText}items-end { justify-content: flex-end; }
  .#{$screenText}items-center { justify-content: center; }
  .#{$screenText}items-top { align-items: flex-start; }
  .#{$screenText}items-bottom { align-items: flex-end; }
  .#{$screenText}items-middle { align-items: center; }
  .#{$screenText}items-around { justify-content: space-around; }
  .#{$screenText}items-between { justify-content: space-between; }
  .#{$screenText}items-initial-items { order: initial; }
  .#{$screenText}items-reverse { flex-direction: row-reverse; }
}

@mixin screen-max($screen) {
  @media (max-width: conf('grid.screens.' + $screen)) {
    @content;
  }
}

@mixin screen-min($screen) {
  @media (min-width: conf('grid.screens.' + $screen)) {
    @content;
  }
}

@mixin screen-min-max($min-screen, $max-screen) {
  $max-width: conf('grid.screens', $max-screen);
  $min-width: if(conf('grid.screens', $min-screen) == $max-width, 0, conf('grid.screens', $min-screen));
  @media (min-width: $min-width) and (max-width: $max-width) {
    @content;
  }
}

@mixin all-screen-min() {
  $_screens: conf('grid.screens');

  @content(null, null, null);

  @each $screenName, $screenWidth in $_screens {
    $screenIndex: list.index($_screens, $screenName $screenWidth) - 1;

    @if $screenName == list.nth(list.nth($_screens, 1), 1) {
      @content($screenName, $screenWidth, $screenIndex);
    } @else {
      @include screen-min($screenName) {
        @content($screenName, $screenWidth, $screenIndex);
      }
    }
  }
}

@mixin all-screen-max() {
  $_screens: conf('grid.screens');

  @content(null, null, null);

  @each $screenName, $screenWidth in $_screens {
    $screenIndex: list.index($_screens, $screenName $screenWidth) - 1;

    @if $screenName == list.nth(list.nth($_screens, 1), 1) {
      @content($screenName, $screenWidth, $screenIndex);
    } @else {
      @include screen-max($screenName) {
        @content($screenName, $screenWidth, $screenIndex);
      }
    }
  }
}
