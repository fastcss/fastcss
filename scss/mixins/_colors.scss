@use 'states';
@use 'sass:list';
@use 'sass:string';
@use 'sass:map';
@use '../functions' as *;

@mixin make-colors($palette: null, $gradients: null, $variants: null) {
  // applies for border classes
  [class*="-border"] {
    border-style: solid;
    border-width: 0;
  }

  @if ($palette) {
    @each $colorConfigName, $hexNew in $palette {
      $colorName: $colorConfigName;

      // extract color variants
      $colorVariants: null;
      @if (string.index($colorConfigName, ':')) {
        $colorData: explode($colorConfigName, ':');
        $colorName: list.nth($colorData, 1);
        $colorVariantsStr: list.nth($colorData, 2);
        @if (string.index($colorVariantsStr, ',')) {
          $colorVariants: explode($colorVariantsStr, ',');
        } @else {
          $colorVariants: $colorVariantsStr;
        }
      }

      // base variant
      @include color($colorConfigName, '500');

      @if index(('transparent','white','black'), $colorName) == null {

        // if no color variants extracted, generate all variants, except for transparent, white and black
        @if ($colorVariants == null) {
          $colorVariants: map.keys(conf('colors.variants'));
        }

        @each $colorVariant in $colorVariants {
          @if ($colorVariant) {
            @include color($colorConfigName, $colorVariant);
          }
        }
      }
    }
  } @else {
    @warn "No color palette defined";
  }

  @if ($gradients) {
    @each $value in $gradients {
      $index: index($gradients, $value) - 1;
      @include gradient($index, $value);
    }
  } @else {
    @warn "No gradients defined";
  }
}

@mixin text($colorConfigName, $variant: '500') {
  $colorData: explode($colorConfigName, ':');
  $colorName: list.nth($colorData, 1);

  $variantText: #{if($variant != '500', '\\:'+$variant, '')};

  .#{$colorName+''}-text#{$variantText} {
    color: get-color($colorConfigName, $variant);
  }

  @include states.on-all-states(#{$colorName+'-text'+$variantText}) {
    @extend .#{$colorName+'-text'+$variantText};
  }
}

@mixin fill($colorConfigName, $variant: '500') {
  $colorData: explode($colorConfigName, ':');
  $colorName: list.nth($colorData, 1);

  $variantText: #{if($variant != '500', '\\:'+$variant, '')};

  .#{$colorName+''}-fill#{$variantText} {
    background-color: get-color($colorConfigName, $variant);
  }

  @include states.on-all-states(#{$colorName+'-fill'+$variantText}) {
    @extend .#{$colorName+'-fill'+$variantText};
  }
}

@mixin border($colorConfigName, $variant: '500') {
  $colorData: explode($colorConfigName, ':');
  $colorName: list.nth($colorData, 1);

  $variantText: #{if($variant != '500', '\\:'+$variant, '')};

  .#{$colorName+''}-border#{$variantText} {
    border-color: get-color($colorConfigName, $variant);
  }

  @include states.on-all-states(#{$colorName+'-border'+$variantText}) {
    @extend .#{$colorName+'-border'+$variantText};
  }
}

@mixin color($colorConfigName, $variant: '500') {
    @include text($colorConfigName, $variant);
    @include fill($colorConfigName, $variant);
    @include border($colorConfigName, $variant);
}

@mixin gradient($suffix, $value) {
  .grad-#{$suffix} {
    background: $value;
  }

  @include states.on-all-states(#{'grad-'+$suffix}) {
    @extend .#{'grad-'+$suffix};
  }
}
